name: 'KMP Publish iOS App on Firebase'
description: 'Build and publish iOS application on Firebase'
author: 'Mifos Initiative'
branding:
  icon: 'package'
  color: 'blue'

inputs:
  app_identifier:
    required: true
    description: 'The unique bundle identifier for the iOS application'

  git_url:
    required: true
    description: 'Git URL to the private repository containing certificates and provisioning profiles for code signing (used by Fastlane Match)'

  git_branch:
    required: true
    description: 'Branch name inside the certificates repository that Fastlane Match should use to fetch signing assets'

  match_type:
    required: true
    description: 'Type of provisioning profile to fetch using Match (e.g., adhoc, appstore, development)'

  provisioning_profile_name:
    required: true
    description: 'Name of the provisioning profile to use for code signing (e.g., match AdHoc com.example.app or match AppStore com.example.app)'

  match_password:
    required: true
    description: 'Password used to encrypt/decrypt the certificates repository used by match'

  match_ssh_private_key:
    required: true
    description: 'SSH private key for accessing the certificates repository'

  ios_package_name:
    description: 'Name of the Android project module'
    required: true

  firebase_app_id:
    description: 'Firebase App ID'
    required: true

  firebase_creds:
    description: 'Firebase credentials'
    required: true

  tester_groups:
    description: 'Firebase Tester Group'
    required: true

runs:
  using: composite
  steps:
    # Cache Gradle dependencies to speed up builds
    - uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.konan
          build
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

    - name: Configure Ruby
      uses: ruby/setup-ruby@a2bbe5b1b236842c1cb7dd11e8e3b51e0a616acc # v1.202.0
      with:
        bundler-cache: true

    - name: Install Fastlane
      shell: bash
      run: |
        gem install bundler:2.2.27
        bundle install --jobs 4 --retry 3
        bundle exec fastlane add_plugin firebase_app_distribution
        bundle exec fastlane add_plugin increment_build_number

    - name: Set up SSH for Match
      shell: bash
      env:
        MATCH_SSH_PRIVATE_KEY: ${{ inputs.match_ssh_private_key }}
      run: |
        mkdir -p ~/.ssh
        echo "$MATCH_SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/match_ci_key
        chmod 600 ~/.ssh/match_ci_key
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        echo -e "Host github.com\n  IdentityFile ~/.ssh/match_ci_key\n  StrictHostKeyChecking no" >> ~/.ssh/config

    # Inflate Firebase credentials
    - name: Inflate Secrets
      shell: bash
      env:
        FIREBASE_CREDS: ${{ inputs.firebase_creds }}
      run: |
        mkdir -p secrets
        touch secrets/firebaseAppDistributionServiceCredentialsFile.json
        echo $FIREBASE_CREDS | base64 --decode > secrets/firebaseAppDistributionServiceCredentialsFile.json

    - name: Upload iOS App to Firebase Distribution
      shell: bash
      env:
        APP_IDENTIFIER: ${{ inputs.app_identifier }}
        GIT_URL: ${{ inputs.git_url }}
        GIT_BRANCH: ${{ inputs.git_branch }}
        MATCH_TYPE: ${{ inputs.match_type }}
        PROVISIONING_PROFILE_NAME: ${{ inputs.provisioning_profile_name }}
        MATCH_PASSWORD: ${{ inputs.match_password }}
        FIREBASE_APP_ID: ${{ inputs.firebase_app_id }}
        GROUPS: ${{ inputs.tester_groups }}

      run: bundle exec fastlane ios deploy_on_firebase \
        app_identifier:"$APP_IDENTIFIER" \
        git_url:"$GIT_URL" \
        git_branch:"$GIT_BRANCH" \
        match_type:"$MATCH_TYPE" \
        provisioning_profile_name:"$PROVISIONING_PROFILE_NAME" \
        match_password:"$MATCH_PASSWORD" \
        git_private_key:~/.ssh/match_ci_key \
        firebase_app_id:"$FIREBASE_APP_ID" \
        serviceCredsFile:secrets/firebaseAppDistributionServiceCredentialsFile.json \
        groups:"$GROUPS"

    - name: Upload iOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app
        retention-days: 1
        compression-level: 9
        path: '**/*.ipa'